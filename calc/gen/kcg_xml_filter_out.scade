/* $******* SCADE Suite KCG 32-bit 6.6.1 beta (build i1) ********
** Command: kcg661.exe -config config.txt
** Generation date: 2020-11-18T09:40:13
*************************************************************$ */

/* xscade source: ../Calculator/Calc.xscade */
package Calc
  package Utils
    const imported NUL : char;

    function imported printValue(value : float32)
      returns (displayValue : char^255);

    node updateDisplay(
        keyEvent : int32;
        negativeSign : bool;
        validKeyPress : bool;
        numberLength : int32)
      returns (valueString : char^255)
    var
      absoluteValueString : char^255 last = DEFAULT_STRING;
      _L3 : char^255;
      _L4 : bool;
      _L5 : int32;
      _L7 : int32;
      _L8 : int32;
      _L9 : char;
      _L11 : int32;
      _L12 : char^255;
      _L13 : char;
      _L14 : char^255;
      _L15 : int32;
    let
      absoluteValueString= _L14;
      _L3= last 'absoluteValueString;
      _L4= validKeyPress;
      _L5= #1 if _L4 then (_L11) else (_L7);
      _L7= - 1;
      _L8= keyEvent;
      _L9= #1 key2Char(_L8);
      _L11= numberLength #1 - 1;
      _L12= (_L3 #1 with [_L5] = _L9);
      activate IfBlock1 if negativeSign
        then var
          _L1 : char^255;
          _L2 : char^(253 - 0 + 1);
          _L3 : char^1;
          _L4 : char;
          _L5 : char^(1 + (253 - 0 + 1));
        let
          valueString= _L5;
          _L1= absoluteValueString;
          _L2= _L1 #1 [0 .. 253];
          _L3= (_L4)#1^1;
          _L4= '-';
          _L5= _L3 #1 @ _L2;
        tel
        else var
          _L1 : char^255;
        let
          valueString= _L1;
          _L1= absoluteValueString;
        tel
      returns ..;
      _L13= NUL;
      _L14= (_L12 #2 with [_L15] = _L13);
      _L15= numberLength;
    tel

  end;

  const KEY_00 : int32 = 0;

  const KEY_01 : int32 = 1;

  const KEY_02 : int32 = 2;

  const KEY_03 : int32 = 3;

  const KEY_04 : int32 = 4;

  const KEY_05 : int32 = 5;

  const KEY_06 : int32 = 6;

  const KEY_07 : int32 = 7;

  const KEY_08 : int32 = 8;

  const KEY_09 : int32 = 9;

  const KEY_10_DECIMAL : int32 = 10;

  const KEY_14_MINUS : int32 = 14;

  const KEY_13_PLUS : int32 = 13;

  const KEY_15_TIMES : int32 = 15;

  const KEY_16_DIVIDE : int32 = 16;

  const KEY_17_CLEAR_ENTRY : int32 = 17;

  const KEY_12_EQUALS : int32 = 12;

  const KEY_18_CLEAR_ALL : int32 = 18;

  const KEY_19_NONE : int32 = 19;

  const KEY_11_NEGATIVE : int32 = 11;

  const DISPLAY_MAX : int32 = 7;

  const
    DEFAULT_STRING : char^255
      = ['0', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' '];

  node root(keyEvent : int32)
    returns (outputDisplay : char^255 last = DEFAULT_STRING)
  var
    entryValue : float32 last = 0.0;
    storedFunction : int32 last = KEY_19_NONE;
    storedValue : float32 last = 0.0;
  let

    automaton SM1
      initial state EnterValue1
        unless
          if keyEvent #5 = KEY_17_CLEAR_ENTRY #1 or
          keyEvent #6 = KEY_18_CLEAR_ALL restart EnterValue1;
          if #2 keyIsFunction(keyEvent)
            do let
              storedValue= last 'entryValue;
              storedFunction= keyEvent;
            tel restart StoreFunction;
        var
          _L1 : float32;
          _L2 : char^255;
          _L3 : int32;
        let
          _L1, _L2= #1 valueEntry(_L3);
          _L3= keyEvent;
          outputDisplay= _L2;
          entryValue= _L1;
        tel

      state EnterValue2
        unless
          if keyEvent #1 = KEY_17_CLEAR_ENTRY restart EnterValue2;
          if keyEvent #3 = KEY_12_EQUALS restart Compute;
          if keyEvent #4 = KEY_18_CLEAR_ALL restart EnterValue1;
        var
          _L3 : int32;
          _L1 : float32;
          _L2 : char^255;
        let
          entryValue= _L1;
          outputDisplay= _L2;
          _L1, _L2= #2 valueEntry(_L3);
          _L3= keyEvent;
        tel

      state Compute
        unless
          if keyEvent #1 <> KEY_19_NONE restart EnterValue1;
        var
          result : float32;
          _L1 : float32;
          _L2 : char^255;
          _L3 : int32;
          _L4 : float32;
          _L5 : float32;
          _L6 : float32;
        let
          _L1= #1 performFunction(_L4, _L5, _L3);
          _L2= #1 Utils::printValue(_L6);
          _L3= storedFunction;
          _L4= storedValue;
          _L5= entryValue;
          result= _L1;
          _L6= result;
          outputDisplay= _L2;
        tel

      state StoreFunction
        unless
          if #1 keyIsEntryElement(keyEvent) restart EnterValue2;
        let
        tel
    returns ..;
  tel

  function #pragma kcg expand #end keyIsDigit(keyEvent : int32)
    returns (isDigit : bool)
  var
    _L2 : int32;
    _L4 : int32;
    _L5 : int32;
    _L6 : bool;
  let
    _L2= keyEvent;
    _L4= KEY_09;
    isDigit= _L6;
    _L5= KEY_00;
    _L6= #1 keyInRange(_L2, _L5, _L4);
  tel

  function #pragma kcg expand #end keyInRange(
      keyEvent : int32;
      startKey : int32;
      endKey : int32)
    returns (inRange : bool)
  var
    _L1 : int32;
    _L2 : int32;
    _L3 : int32;
    _L4 : bool;
    _L5 : bool;
    _L6 : bool;
  let
    _L1= keyEvent;
    _L2= startKey;
    _L3= endKey;
    inRange= _L6;
    _L4= _L1 #1 >= _L2;
    _L5= _L1 #1 <= _L3;
    _L6= _L4 #1 and _L5;
  tel

  function #pragma kcg expand #end keyIsFunction(keyEvent : int32)
    returns (isDigit : bool)
  var
    _L2 : int32;
    _L4 : int32;
    _L5 : int32;
    _L6 : bool;
  let
    _L2= keyEvent;
    _L4= KEY_16_DIVIDE;
    isDigit= _L6;
    _L5= KEY_13_PLUS;
    _L6= #2 keyInRange(_L2, _L5, _L4);
  tel

  node valueEntry(keyEvent : int32)
    returns (value : float32 last = 0.0; valueString : char^255)
  sig
    validKeyPress;
  var
    negativeSign : bool last = false;
    rightmostDigitValue : float32 last = 1.0;
    numberLength : int32 last = 1;
    integerRepresentation : int32 last = 0;
    _L18 : float32;
    _L21 : float32;
    _L22 : float32;
    _L23 : bool;
    _L24 : float32;
    _L25 : float32;
    _L26 : float32;
    _L28 : int32;
    _L29 : char^255;
    _L30 : bool;
    _L31 : int32;
    _L32 : bool;
    _L33 : int32;
    _L34 : float32;
  let

    automaton SM1
      initial state NegativeSignToggle
        unless
          if keyEvent #1 = KEY_11_NEGATIVE
            do let negativeSign= #1 not last 'negativeSign; tel restart NegativeSignToggle;
        let
        tel
    returns ..;

    automaton SM2
      initial state IntegerEntry
        unless
          if keyEvent #2 = KEY_10_DECIMAL restart AddDecimalPoint;
        let
          activate IfBlock1 if last 'numberLength #1 >= DISPLAY_MAX
            then let
            tel
            else if last 'integerRepresentation #12 = 0 #5 and
            #3 keyIsDigit(keyEvent)
            then var
              _L1 : bool;
              _L2 : int32;
            let
              _L1= keyEvent #1 <> KEY_00;
              emit 'validKeyPress if _L1;
              _L2= keyEvent;
              integerRepresentation= _L2;
            tel
            else if #1 keyIsDigit(keyEvent)
            then var
              _L1 : int32;
              _L2 : int32;
              _L4 : int32;
              _L5 : int32;
              _L6 : int32;
              _L3 : int32;
            let
              _L1= _L2 #1 + _L4;
              _L2= _L3 #1 * _L5;
              _L4= keyEvent;
              _L5= 10;
              numberLength= _L6;
              _L6= last 'numberLength #2 + 1;
              emit 'validKeyPress;
              integerRepresentation= _L1;
              _L3= last 'integerRepresentation;
            tel
            else let
            tel
          returns ..;
        tel

      state FractionalEntry
        let
          activate IfBlock1 if last 'numberLength #2 >= DISPLAY_MAX
            then let
            tel
            else if #2 keyIsDigit(keyEvent)
            then var
              _L1 : int32;
              _L2 : int32;
              _L4 : int32;
              _L5 : int32;
              _L6 : int32;
              _L8 : float32;
              _L9 : float32;
              _L11 : float32;
              _L3 : int32;
            let
              _L1= _L2 #5 + _L4;
              _L2= _L3 #2 * _L5;
              _L4= keyEvent;
              _L5= 10;
              _L6= last 'numberLength #10 + 1;
              _L8= _L11 #1 / _L9;
              _L9= 10.0;
              rightmostDigitValue= _L8;
              _L11= last 'rightmostDigitValue;
              numberLength= _L6;
              emit 'validKeyPress;
              integerRepresentation= _L1;
              _L3= last 'integerRepresentation;
            tel
            else let
            tel
          returns ..;
        tel

      state AddDecimalPoint
        unless
          if true restart FractionalEntry;
        var
          _L4 : int32;
        let
          numberLength= _L4;
          _L4= last 'numberLength #4 + 1;
          emit 'validKeyPress;
        tel
    returns ..;
    value= _L22;
    valueString= _L29;
    _L18= rightmostDigitValue;
    _L21= _L34 #3 * _L18;
    _L22= _L21 #4 * _L24;
    _L23= negativeSign;
    _L24= #2 if _L23 then (_L25) else (_L26);
    _L25= - 1.0;
    _L26= 1.0;
    _L28= integerRepresentation;
    _L29= #1 Utils::updateDisplay(_L33, _L30, _L32, _L31);
    _L30= negativeSign;
    _L31= numberLength;
    _L32= 'validKeyPress;
    _L33= keyEvent;
    _L34= (_L28 #2 : float32);
  tel

  function key2Char(keyEvent : int32) returns (charOut : char)
  let
    activate IfBlock1 if keyEvent #54 = KEY_00
      then let
        charOut= '0';
      tel
      else if keyEvent #55 = KEY_01
      then let
        charOut= '1';
      tel
      else if keyEvent #56 = KEY_02
      then let
        charOut= '2';
      tel
      else if keyEvent #57 = KEY_03
      then let
        charOut= '3';
      tel
      else if keyEvent #58 = KEY_04
      then let
        charOut= '4';
      tel
      else if keyEvent #59 = KEY_05
      then let
        charOut= '5';
      tel
      else if keyEvent #60 = KEY_06
      then let
        charOut= '6';
      tel
      else if keyEvent #61 = KEY_07
      then let
        charOut= '7';
      tel
      else if keyEvent #62 = KEY_08
      then let
        charOut= '8';
      tel
      else if keyEvent #63 = KEY_09
      then let
        charOut= '9';
      tel
      else if keyEvent #64 = KEY_10_DECIMAL
      then let
        charOut= '.';
      tel
      else let
        charOut= '0';
      tel
    returns ..;
  tel

  function #pragma kcg expand #end keyIsEntryElement(keyEvent : int32)
    returns (isDigit : bool)
  var
    _L2 : int32;
    _L4 : int32;
    _L5 : int32;
    _L6 : bool;
  let
    _L2= keyEvent;
    _L4= KEY_11_NEGATIVE;
    isDigit= _L6;
    _L5= KEY_00;
    _L6= #1 keyInRange(_L2, _L5, _L4);
  tel

  function performFunction(value1 : float32; value2 : float32; f : int32)
    returns (output : float32)
  let
    activate IfBlock1 if f #1 = KEY_13_PLUS
      then let
        output= value1 #1 + value2;
      tel
      else if f #2 = KEY_14_MINUS
      then let
        output= value1 #1 - value2;
      tel
      else if f #3 = KEY_15_TIMES
      then let
        output= value1 #1 * value2;
      tel
      else if f #5 = KEY_16_DIVIDE #1 and value2 #1 <> 0.0
      then let
        output= value1 #2 * value2;
      tel
      else let
        output= 0;
      tel
    returns ..;
  tel

end;

/* $******* SCADE Suite KCG 32-bit 6.6.1 beta (build i1) ********
** -
** Generation date: 2020-11-18T09:40:13
*************************************************************$ */
